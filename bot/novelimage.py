from datetime import datetime, timezone

import discord
from discord.ext import commands
from discord import app_commands
from typing import TYPE_CHECKING
from .novelapi import API
from novelai_api.ImagePreset import ImageModel, ImagePreset, ImageResolution, UCPreset
import shortuuid
import logging
import io
log = logging.getLogger(__name__)


class NovelImaging(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @app_commands.command(name='generate', description='Generates a new image from Novel AI using the supplied tags')
    @app_commands.describe(tags="The tags that are used to describe the image")
    async def generate_cmd(self, itx: discord.Interaction, *, tags: str):
        await itx.response.defer()
        async with API() as api_handler:
            api = api_handler.api
            preset = ImagePreset()
            embeds = []
            files = []
            async for img in api.high_level.generate_image(tags, ImageModel.Anime_Full, preset):
                bo = io.BytesIO(img)
                bo.seek(0)
                rnd = shortuuid.uuid()
                name = itx.user.display_name
                fn = f"image_{name}_{rnd}.png"
                discord_file = discord.File(bo, filename=fn)
                description = f"Tags used\n\n {tags}"
                embed = discord.Embed(title="New NovelAI Image", description=description)
                embed.set_footer(text=f"Generated by {itx.user.display_name}")
                embed.set_image(url=f"attachment://{fn}")
                embed.timestamp = datetime.now(timezone.utc)
                embeds.append(embed)
                files.append(discord_file)
            await itx.followup.send(embeds=embeds, files=files)


async def setup(bot):
    await bot.add_cog(NovelImaging(bot))
